1. Install JWT
	dotnet new webapi -n JWTAuthentication
2. Configuration to Program.cs

public void ConfigureServices(IServiceCollection services)
{
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = Configuration["Jwt:Issuer"],
            ValidAudience = Configuration["Jwt:Issuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]))
        };
    });
    services.AddMvc();
}
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.UseAuthentication();
    app.UseMvc();
}

3.AppSetting.Json

{
  "Jwt": {
    "Key": "ThisismySecretKey",
    "Issuer": "Test.com"
  }
}
4. Controller

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace JWTAuthentication.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LoginController : Controller
    {
        private IConfiguration _config;

        public LoginController(IConfiguration config)
        {
            _config = config;
        }
        [AllowAnonymous]
        [HttpPost]
        public IActionResult Login([FromBody]UserModel login)
        {
            IActionResult response = Unauthorized();
            var user = AuthenticateUser(login);

            if (user != null)
            {
                var tokenString = GenerateJSONWebToken(user);
                response = Ok(new { token = tokenString });
            }

            return response;
        }

        private string GenerateJSONWebToken(UserModel userInfo)
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(_config["Jwt:Issuer"],
              _config["Jwt:Issuer"],
              null,
              expires: DateTime.Now.AddMinutes(120),
              signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        private UserModel AuthenticateUser(UserModel login)
        {
            UserModel user = null;

            //Validate the User Credentials
            //Demo Purpose, I have Passed HardCoded User Information
            if (login.Username == "Jignesh")
            {
                user = new UserModel { Username = "Jignesh Trivedi", EmailAddress = "test.btest@gmail.com" };
            }
            return user;
        }
    }
}

[HttpGet]
[Authorize]
public ActionResult<IEnumerable<string>> Get()
{
    return new string[] { "value1", "value2", "value3", "value4", "value5" };
}

Testing:
Request URL: https://localhost:44332/api/login (Token generate)
https://localhost:44332/api/value (Pass token to get value)

Notes:
> JWT consists of three essential parts Headers(algorithm and type),Payloads(data),signataure(header+payload)
signature sign in through encryption algorithem.

ValidateIssuer = true > Validate the server (ValidateIssuer = true) that generates the token.
ValidateAudience = true > Validate the recipient of the token is authorized to receive (ValidateAudience = true)
ValidateLifetime = true > Check if the token is not expired and the signing key of the issuer is valid (ValidateLifetime = true)
ValidateIssuerSigningKey = true > Validate signature of the token (ValidateIssuerSigningKey = true)


Handle Claims with JWT** Used for validate the authorization**
    Claims are data contained by the token. They are information about the user which helps us to 
    authorize access to a resource. They could be Username, email address, role, or any other
    information. We can add claims information to the JWT so that they are available when checking for authorization.

